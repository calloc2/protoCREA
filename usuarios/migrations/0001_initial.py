# Generated by Django 5.2 on 2025-08-26 17:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('cpf', models.CharField(help_text='000.000.000-00', max_length=14, unique=True, verbose_name='CPF')),
                ('telefone', models.CharField(blank=True, help_text='(00) 00000-0000', max_length=15, verbose_name='Telefone')),
                ('tipo_usuario', models.CharField(choices=[('engenheiro', 'Engenheiro'), ('arquiteto', 'Arquiteto'), ('tecnico', 'Técnico'), ('estudante', 'Estudante'), ('funcionario', 'Funcionário CREA-TO'), ('outro', 'Outro')], default='engenheiro', max_length=20, verbose_name='Tipo de Usuário')),
                ('registro_profissional', models.CharField(blank=True, help_text='Número do registro no CREA', max_length=20, verbose_name='Registro Profissional')),
                ('empresa', models.CharField(blank=True, max_length=200, verbose_name='Empresa/Instituição')),
                ('cargo', models.CharField(blank=True, max_length=100, verbose_name='Cargo/Função')),
                ('permissao', models.CharField(choices=[('visualizador', 'Visualizador'), ('editor', 'Editor'), ('publicador', 'Publicador'), ('admin', 'Administrador')], default='visualizador', max_length=20, verbose_name='Nível de Permissão')),
                ('pode_publicar', models.BooleanField(default=False, verbose_name='Pode Publicar Atas')),
                ('pode_visualizar_sigiloso', models.BooleanField(default=False, verbose_name='Pode Visualizar Sigiloso')),
                ('documento_identidade', models.FileField(blank=True, null=True, upload_to='usuarios/documentos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Documento de Identidade')),
                ('comprovante_residencia', models.FileField(blank=True, null=True, upload_to='usuarios/documentos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Comprovante de Residência')),
                ('diploma_ou_certificado', models.FileField(blank=True, null=True, upload_to='usuarios/documentos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Diploma ou Certificado')),
                ('email_verificado', models.BooleanField(default=False, verbose_name='E-mail Verificado')),
                ('conta_aprovada', models.BooleanField(default=False, verbose_name='Conta Aprovada')),
                ('data_aprovacao', models.DateTimeField(blank=True, null=True, verbose_name='Data de Aprovação')),
                ('criado_em', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('atualizado_em', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('ultimo_acesso', models.DateTimeField(blank=True, null=True, verbose_name='Último Acesso')),
                ('aprovado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_aprovados', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-criado_em'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
